# This is a basic workflow to help you get started with Actions

name: Deploy .NET to on-prem Octopus installation

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  SONAR_PROJECT_ID: 'id-of-project-in-sonarqube'
  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build-n-test:
    name: Build and execute tests
    runs-on: ubuntu-24.04
    environment: hell
    env:
      VERSION: "1.0.${{ github.run_number}}"
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages    
      SONAR_APIKEY: ${{secrets.SONAR_APIKEY}}
    steps:
    - uses: actions/checkout@v4
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Add Nykredit NeXus package registry
      shell: pwsh
      env:
        nexususer: ${{secrets.NEXUS_USER}}
        nexuspassword: ${{secrets.NEXUS_PASSWORD}}
      run: | 
        Write-Host "Using NeXus user name ${Env:nexususer}"
        dotnet nuget add source -n "NykreditNexus" --username $Env:nexususer --password $Env:nexuspassword --store-password-in-clear-text "https://maven.tools.nykredit.it/nexus/repository/itcm_nuget_group/"
    - name: Restore dependencies
      run: dotnet restore
    - name: Login to Nykredit NeXus Container Registry
      uses: docker/login-action@v3
      with:
        registry: maven.tools.nykredit.it
        username: ${{secrets.NEXUS_USER}}
        password: ${{secrets.NEXUS_PASSWORD}}

# Setup Sonar Scanning
    - name: Set up JDK 17
      uses: actions/setup-java@v1
      with:
        java-version: 1.17
    - name: Cache SonarQube packages
      uses: actions/cache@v4
      with:
        path: ~\.sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar
    - name: Cache SonarQube scanner
      id: cache-sonar-scanner
      uses: actions/cache@v4
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner
    - name: Install SonarQube scanner
      shell: pwsh
      run: |
        $sonarScannerIsInstalled = (dotnet tool list --global dotnet-sonarscanner | Out-String).ToLower().Contains("sonarscanner")
        if($sonarScannerIsInstalled) {
           dotnet tool update --global dotnet-sonarscanner
        }
        else {
           dotnet tool install --global dotnet-sonarscanner
        }
    - name: Install dotnet-coverage
      shell: pwsh
      run: dotnet tool install --global dotnet-coverage
    - name: Start SonarScanner
      shell: pwsh
      run: |
        dotnet sonarscanner begin /k:$Env:SONAR_PROJECT_ID /v:$Env:VERSION /d:sonar.token=$Env:SONAR_APIKEY /d:sonar.dotnet.excludeTestProjects=$True /d:sonar.host.url=https://sonarqube.tools.nykredit.it  /d:sonar.language=cs /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml | Write-Host
    - name: Build
      run: dotnet build --no-restore
    - name: Run tests
      run: dotnet-coverage collect "dotnet test" -f xml -o "coverage.xml"
    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      with:
        name: coverage.xml
        path: coverage.xml
    - name: End SonarScanner
      shell: pwsh
      run: |
        dotnet sonarscanner end /d:sonar.token=$Env:SONAR_APIKEY | Write-Host


  build-n-publish:
    name: Build and publish
    runs-on: ubuntu-24.04
    environment: hell
    needs: build-n-test
    env:
      BRANCH_NAME: ${{ github.ref_name }}
      NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages    
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x
    - name: Install GitVersion
      uses: gittools/actions/gitversion/setup@v3.1.3
      with:
        versionSpec: '6.0.x'
        preferLatestVersion: true
    - name: Determine SemVer
      uses: gittools/actions/gitversion/execute@v3.1.3
    - name: Add Nykredit NeXus package registry
      shell: pwsh
      env:
        nexususer: ${{secrets.NEXUS_USER}}
        nexuspassword: ${{secrets.NEXUS_PASSWORD}}
      run: | 
        Write-Host "Using NeXus user name ${Env:nexususer}"
        dotnet nuget add source -n "NykreditNexus" --username $Env:nexususer --password $Env:nexuspassword --store-password-in-clear-text "https://maven.tools.nykredit.it/nexus/repository/itcm_nuget_group/"
        dotnet nuget add source -n NykreditNexusPush --username $Env:nexususer --password $Env:nexuspassword --store-password-in-clear-text "https://maven.tools.nykredit.it/nexus/repository/itcm_solutions_releases/"
    - name: Restore dependencies
      run: dotnet restore
    - name: Build 
      run: dotnet build --no-restore
    - name: Package projects
      shell: pwsh
      run: dotnet pack --output Dist /p:Version=${{env.fullSemVer}}
    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: packaged-artifacts
        path: Dist
    - name: Upload packages to Nykredit NeXus artifactory
      shell: pwsh
      run: |
         $nupkgFiles = Get-ChildItem -Path Dist -Filter *.nupkg -Name 
         foreach($nupkgFile in $nupkgFiles)
         {
             dotnet nuget push Dist/$nupkgFile --source NykreditNexusPush
         }

